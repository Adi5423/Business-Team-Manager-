department/models.py
```
from django.db import models
from django.contrib.auth.models import User
from django.core.validators import MaxValueValidator

# Create your models here.
class EmployeeProfile(models.Model):
    ROLE_CHOICES = [
        ('employee', 'Employee'),
        ('manager',  'Manager'),
        ('head',     'Head'),
        ('admin',    'Admin'),
    ]
    user     = models.OneToOneField(User, on_delete=models.CASCADE)
    role     = models.CharField(max_length=20, choices=ROLE_CHOICES, default='employee')
    progress = models.PositiveIntegerField(
        default=0,
        validators=[MaxValueValidator(100)]
    )
    # remove score/last_day_progress here; we’ll track per-task reviews instead

class Task(models.Model):
    title        = models.CharField(max_length=200)
    description  = models.TextField(blank=True)
    assigned_to  = models.ForeignKey(EmployeeProfile, related_name='tasks', on_delete=models.CASCADE)
    assigned_by  = models.ForeignKey(EmployeeProfile, related_name='assigned_tasks', on_delete=models.SET_NULL, null=True)
    status       = models.CharField(max_length=20, choices=[('pending','Pending'),('in_progress','In Progress'),('done','Done')], default='pending')
    progress     = models.PositiveIntegerField(default=0)
    review       = models.TextField(blank=True)
    attachment   = models.FileField(upload_to='task_uploads/', blank=True, null=True)
    created_at   = models.DateTimeField(auto_now_add=True)
    due_date     = models.DateField(null=True, blank=True)

    def __str__(self):
        return f"{self.title} → {self.assigned_to.user.username}"
```

views.py
```
from django.contrib.auth.decorators import login_required
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages

from .models import EmployeeProfile, Task

# Create your views here.
@login_required
def employee_list(request):
    """
    Show all non-admin employees, ordered: Head → Manager → Employee
    """
    priority = {'head': 1, 'manager': 2, 'employee': 3}
    profiles = (
        EmployeeProfile.objects
        .exclude(role='admin')
        .select_related('user')
    )
    sorted_profiles = sorted(
        profiles,
        key=lambda p: priority.get(p.role, 99)
    )
    for p in sorted_profiles:
        p.progress_offset = 100 - (p.progress or 0)
    return render(request, 'employee_list.html', {'profiles': sorted_profiles})


@login_required
def my_profile(request):
    """
    Show & edit the logged-in user's own profile.
    Enforce progress <= 100 via min().
    """
    profile, _ = EmployeeProfile.objects.get_or_create(user=request.user)

    if request.method == 'POST':
        # Only progress is editable (others managed by Head/Manager)
        try:
            new_prog = int(request.POST.get('progress', profile.progress))
        except ValueError:
            new_prog = profile.progress

        profile.progress = min(new_prog, 100)
        profile.save()
        messages.success(request, "Your progress has been updated.")
        return redirect('my-profile')

    return render(request, 'profile.html', {'profile': profile})


@login_required
def assign_task(request):
    """
    Allow Heads & Managers to assign tasks.
    Managers cannot assign to Heads.
    """
    assigner = EmployeeProfile.objects.get(user=request.user)
    if assigner.role not in ('head', 'manager'):
        messages.error(request, "Permission denied.")
        return redirect('employee-list')

    # Build the assignee list
    if assigner.role == 'head':
        assignees = EmployeeProfile.objects.exclude(role='admin')
    else:  # manager
        assignees = EmployeeProfile.objects.exclude(role__in=('admin', 'head'))

    if request.method == 'POST':
        title       = request.POST.get('title', '').strip()
        description = request.POST.get('description', '').strip()
        to_id       = request.POST.get('assigned_to')

        if title and to_id:
            try:
                assignee = EmployeeProfile.objects.get(id=to_id)
                Task.objects.create(
                    title=title,
                    description=description,
                    assigned_to=assignee,
                    assigned_by=assigner
                )
                messages.success(request, "Task assigned successfully.")
            except EmployeeProfile.DoesNotExist:
                messages.error(request, "Selected employee does not exist.")
        else:
            messages.error(request, "Title and assignee are required.")

        return redirect('assign-task')

    return render(request, 'assign_task.html', {
        'employees': assignees,
    })

@login_required
def edit_profile(request, user_id):
    """
    Allow Head, Manager, Admin to edit other users' profiles. Employees can only edit their own.
    """
    target_profile = get_object_or_404(EmployeeProfile, user__id=user_id)
    current_profile = EmployeeProfile.objects.get(user=request.user)
    can_edit = False
    if current_profile.role in ('head', 'admin'):
        can_edit = True
    elif current_profile.role == 'manager' and target_profile.role == 'employee':
        can_edit = True
    elif current_profile.user == target_profile.user:
        can_edit = True
    if not can_edit:
        messages.error(request, "Permission denied.")
        return redirect('employee-list')
    if request.method == 'POST':
        try:
            new_prog = int(request.POST.get('progress', target_profile.progress))
        except ValueError:
            new_prog = target_profile.progress
        target_profile.progress = min(new_prog, 100)
        target_profile.save()
        messages.success(request, "Profile updated.")
        return redirect('employee-list')
    return render(request, 'profile.html', {'profile': target_profile, 'editing_other': current_profile != target_profile})

@login_required
def report_task(request, task_id):
    """
    Allow employees to mark/report their own tasks as done or add a report.
    """
    task = get_object_or_404(Task, id=task_id)
    profile = EmployeeProfile.objects.get(user=request.user)
    if task.assigned_to != profile:
        messages.error(request, "You can only report your own tasks.")
        return redirect('employee-list')
    if request.method == 'POST':
        status = request.POST.get('status', task.status)
        progress = min(int(request.POST.get('progress', task.progress)), 100)
        report = request.POST.get('report', task.review)
        task.status = status
        task.progress = progress
        task.review = report
        task.save()
        messages.success(request, "Task updated.")
        return redirect('my-profile')
    return render(request, 'report_task.html', {'task': task})
```

base.html
```
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <!-- Tailwind via CDN (dev/demo) -->
  <script src="https://cdn.tailwindcss.com"></script>
  <title>{% block title %}Dashboard{% endblock %}</title>
  <style>
    body {
      background: linear-gradient(135deg, #e0e7ff 0%, #f0f9ff 50%, #c7d2fe 100%);
      min-height: 100vh;
    }
    .glass {
      background: rgba(255,255,255,0.35);
      box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.10);
      backdrop-filter: blur(8px);
      -webkit-backdrop-filter: blur(8px);
      border-radius: 1rem;
      border: 1px solid rgba(255,255,255,0.18);
    }
  </style>
</head>
<body class="flex flex-col">
  <!-- Navbar -->
  <nav class="bg-white/80 shadow p-4 flex justify-between items-center glass">
    <a href="{% url 'employee-list' %}" class="text-xl font-bold">YourCompany</a>
    <div>
      {% if user.is_authenticated %}
        <span class="mr-4">Hi, {{ user.username }}</span>
        <a href="{% url 'logout' %}" class="underline">Logout</a>
      {% endif %}
    </div>
  </nav>

  {% if messages %}
    <div class="mb-4 container mx-auto">
      {% for message in messages %}
        <div class="p-3 rounded mb-2 glass
          {% if message.tags == 'success' %}bg-green-100/60 text-green-800
          {% elif message.tags == 'error' %}bg-red-100/60 text-red-800
          {% else %}bg-blue-100/60 text-blue-800{% endif %}">
          {{ message }}
        </div>
      {% endfor %}
    </div>
  {% endif %}

  <!-- Main Content -->
  <main class="flex-1 container mx-auto p-4">
    <div class="glass p-2 sm:p-6">
      {% block content %}{% endblock %}
    </div>
  </main>

  <footer class="bg-white/80 text-center p-2 text-sm glass">
    &copy; {{ now.year }} YourCompany. All rights reserved.
  </footer>
</body>
</html>

```
employee_list.html
```
{% extends 'base.html' %}
{% block title %}Team Overview{% endblock %}
{% block content %}
  <div class="max-w-xl mx-auto w-full">
    <h1 class="text-2xl font-bold mb-6 text-center">Team Overview</h1>

    <!-- Tabs -->
    <div class="mb-6 overflow-x-auto">
      <ul class="flex border-b min-w-max whitespace-nowrap glass">
        <li class="-mb-px mr-1">
          <a href="#all" class="bg-white inline-block border-l border-t border-r rounded-t py-2 px-4 font-semibold" onclick="showTab('all')">All</a>
        </li>
        <li class="-mb-px mr-1">
          <a href="#employee" class="bg-white inline-block border-l border-t border-r rounded-t py-2 px-4 font-semibold" onclick="showTab('employee')">Employees</a>
        </li>
        <li class="-mb-px mr-1">
          <a href="#manager" class="bg-white inline-block border-l border-t border-r rounded-t py-2 px-4 font-semibold" onclick="showTab('manager')">Managers</a>
        </li>
        <li class="-mb-px mr-1">
          <a href="#head" class="bg-white inline-block border-l border-t border-r rounded-t py-2 px-4 font-semibold" onclick="showTab('head')">Heads</a>
        </li>
      </ul>
    </div>

    <!-- Tab Contents -->
    <div id="tab-all">
      <h2 class="text-xl font-bold mt-6">All People</h2>
      <ul class="space-y-4">
        {% for profile in profiles %}
          <li class="glass bg-white/40 rounded shadow p-4 flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-2 sm:space-y-0">
            <div class="flex flex-col sm:flex-row sm:items-center space-y-1 sm:space-y-0 sm:space-x-4 w-full">
              <span class="font-semibold text-lg">{{ profile.user.username }}</span>
              <span class="text-gray-500">- {{ profile.role }}</span>
            </div>
            <div class="flex justify-center items-center w-full sm:w-auto mt-2 sm:mt-0">
              <div class="relative w-16 h-16">
                <svg class="w-16 h-16" viewBox="0 0 36 36">
                  <circle class="text-gray-200" stroke-width="4" stroke="currentColor" fill="none" cx="18" cy="18" r="16" />
                  <circle class="text-blue-500" stroke-width="4" stroke-linecap="round" stroke="currentColor" fill="none" cx="18" cy="18" r="16"
                    stroke-dasharray="100, 100" stroke-dashoffset="{{ profile.progress_offset }}" style="transition: stroke-dashoffset 0.5s;" />
                </svg>
                <span class="absolute inset-0 flex items-center justify-center text-lg font-bold text-blue-700">{{ profile.progress|default:0 }}%</span>
              </div>
            </div>
            <div class="flex flex-col sm:flex-row mt-2 sm:mt-0 space-y-2 sm:space-y-0 sm:space-x-2 w-full sm:w-auto justify-center">
              {% if user.is_authenticated %}
                {% if profile.user != user %}
                  {% if user.employeeprofile.role == 'head' or user.employeeprofile.role == 'manager' or user.employeeprofile.role == 'admin' %}
                    <a href="{% url 'edit-profile' profile.user.id %}" class="text-blue-600 underline">Edit</a>
                    <a href="{% url 'assign-task' %}?to={{ profile.id }}" class="text-green-600 underline">Assign Task</a>
                  {% endif %}
                {% endif %}
              {% endif %}
              {% if profile.user == user %}
                <a href="{% url 'my-profile' %}" class="text-blue-600 underline ml-0 sm:ml-4">View My Profile</a>
              {% endif %}
            </div>
          </li>
        {% endfor %}
      </ul>
    </div>

    <div id="tab-employee" style="display:none;">
      <h2 class="text-xl font-bold mt-6">Employees</h2>
      <ul class="space-y-4">
        {% for profile in profiles %}
          {% if profile.role == 'employee' %}
            <li class="glass bg-white/40 rounded shadow p-4 flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-2 sm:space-y-0">
              <div class="flex flex-col sm:flex-row sm:items-center space-y-1 sm:space-y-0 sm:space-x-4 w-full">
                <span class="font-semibold text-lg">{{ profile.user.username }}</span>
                <span class="text-gray-500">- {{ profile.role }}</span>
              </div>
              <div class="flex justify-center items-center w-full sm:w-auto mt-2 sm:mt-0">
                <div class="relative w-16 h-16">
                  <svg class="w-16 h-16" viewBox="0 0 36 36">
                    <circle class="text-gray-200" stroke-width="4" stroke="currentColor" fill="none" cx="18" cy="18" r="16" />
                    <circle class="text-blue-500" stroke-width="4" stroke-linecap="round" stroke="currentColor" fill="none" cx="18" cy="18" r="16"
                      stroke-dasharray="100, 100" stroke-dashoffset="{{ profile.progress_offset }}" style="transition: stroke-dashoffset 0.5s;" />
                  </svg>
                  <span class="absolute inset-0 flex items-center justify-center text-lg font-bold text-blue-700">{{ profile.progress|default:0 }}%</span>
                </div>
              </div>
              <div class="flex flex-col sm:flex-row mt-2 sm:mt-0 space-y-2 sm:space-y-0 sm:space-x-2 w-full sm:w-auto justify-center">
                {% if user.is_authenticated %}
                  {% if profile.user != user %}
                    {% if user.employeeprofile.role == 'head' or user.employeeprofile.role == 'manager' or user.employeeprofile.role == 'admin' %}
                      <a href="{% url 'edit-profile' profile.user.id %}" class="text-blue-600 underline">Edit</a>
                      <a href="{% url 'assign-task' %}?to={{ profile.id }}" class="text-green-600 underline">Assign Task</a>
                    {% endif %}
                  {% endif %}
                {% endif %}
                {% if profile.user == user %}
                  <a href="{% url 'my-profile' %}" class="text-blue-600 underline ml-0 sm:ml-4">View My Profile</a>
                  <a href="{% url 'report-task' 0 %}" class="text-orange-600 underline ml-0 sm:ml-4">Report/Mark Task</a>
                {% endif %}
              </div>
            </li>
          {% endif %}
        {% endfor %}
      </ul>
    </div>

    <div id="tab-manager" style="display:none;">
      <h2 class="text-xl font-bold mt-6">Managers</h2>
      <ul class="space-y-4">
        {% for profile in profiles %}
          {% if profile.role == 'manager' %}
            <li class="glass bg-white/40 rounded shadow p-4 flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-2 sm:space-y-0">
              <div class="flex flex-col sm:flex-row sm:items-center space-y-1 sm:space-y-0 sm:space-x-4 w-full">
                <span class="font-semibold text-lg">{{ profile.user.username }}</span>
                <span class="text-gray-500">- {{ profile.role }}</span>
              </div>
              <div class="flex justify-center items-center w-full sm:w-auto mt-2 sm:mt-0">
                <div class="relative w-16 h-16">
                  <svg class="w-16 h-16" viewBox="0 0 36 36">
                    <circle class="text-gray-200" stroke-width="4" stroke="currentColor" fill="none" cx="18" cy="18" r="16" />
                    <circle class="text-blue-500" stroke-width="4" stroke-linecap="round" stroke="currentColor" fill="none" cx="18" cy="18" r="16"
                      stroke-dasharray="100, 100" stroke-dashoffset="{{ profile.progress_offset }}" style="transition: stroke-dashoffset 0.5s;" />
                  </svg>
                  <span class="absolute inset-0 flex items-center justify-center text-lg font-bold text-blue-700">{{ profile.progress|default:0 }}%</span>
                </div>
              </div>
              <div class="flex flex-col sm:flex-row mt-2 sm:mt-0 space-y-2 sm:space-y-0 sm:space-x-2 w-full sm:w-auto justify-center">
                {% if user.is_authenticated %}
                  {% if profile.user != user %}
                    {% if user.employeeprofile.role == 'head' or user.employeeprofile.role == 'manager' or user.employeeprofile.role == 'admin' %}
                      <a href="{% url 'edit-profile' profile.user.id %}" class="text-blue-600 underline">Edit</a>
                      <a href="{% url 'assign-task' %}?to={{ profile.id }}" class="text-green-600 underline">Assign Task</a>
                    {% endif %}
                  {% endif %}
                {% endif %}
                {% if profile.user == user %}
                  <a href="{% url 'my-profile' %}" class="text-blue-600 underline ml-0 sm:ml-4">View My Profile</a>
                {% endif %}
              </div>
            </li>
          {% endif %}
        {% endfor %}
      </ul>
    </div>

    <div id="tab-head" style="display:none;">
      <h2 class="text-xl font-bold mt-6">Heads</h2>
      <ul class="space-y-4">
        {% for profile in profiles %}
          {% if profile.role == 'head' %}
            <li class="glass bg-white/40 rounded shadow p-4 flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-2 sm:space-y-0">
              <div class="flex flex-col sm:flex-row sm:items-center space-y-1 sm:space-y-0 sm:space-x-4 w-full">
                <span class="font-semibold text-lg">{{ profile.user.username }}</span>
                <span class="text-gray-500">- {{ profile.role }}</span>
              </div>
              <div class="flex justify-center items-center w-full sm:w-auto mt-2 sm:mt-0">
                <div class="relative w-16 h-16">
                  <svg class="w-16 h-16" viewBox="0 0 36 36">
                    <circle class="text-gray-200" stroke-width="4" stroke="currentColor" fill="none" cx="18" cy="18" r="16" />
                    <circle class="text-blue-500" stroke-width="4" stroke-linecap="round" stroke="currentColor" fill="none" cx="18" cy="18" r="16"
                      stroke-dasharray="100, 100" stroke-dashoffset="{{ profile.progress_offset }}" style="transition: stroke-dashoffset 0.5s;" />
                  </svg>
                  <span class="absolute inset-0 flex items-center justify-center text-lg font-bold text-blue-700">{{ profile.progress|default:0 }}%</span>
                </div>
              </div>
              <div class="flex flex-col sm:flex-row mt-2 sm:mt-0 space-y-2 sm:space-y-0 sm:space-x-2 w-full sm:w-auto justify-center">
                {% if user.is_authenticated %}
                  {% if profile.user != user %}
                    {% if user.employeeprofile.role == 'head' or user.employeeprofile.role == 'admin' %}
                      <a href="{% url 'edit-profile' profile.user.id %}" class="text-blue-600 underline">Edit</a>
                      <a href="{% url 'assign-task' %}?to={{ profile.id }}" class="text-green-600 underline">Assign Task</a>
                    {% endif %}
                  {% endif %}
                {% endif %}
                {% if profile.user == user %}
                  <a href="{% url 'my-profile' %}" class="text-blue-600 underline ml-0 sm:ml-4">View My Profile</a>
                {% endif %}
              </div>
            </li>
          {% endif %}
        {% endfor %}
      </ul>
    </div>
  </div>
  <script>
    function showTab(tab) {
      document.getElementById('tab-all').style.display = 'none';
      document.getElementById('tab-employee').style.display = 'none';
      document.getElementById('tab-manager').style.display = 'none';
      document.getElementById('tab-head').style.display = 'none';
      document.getElementById('tab-' + tab).style.display = 'block';
      localStorage.setItem('lastTab', tab);
    }
    // Show last selected tab or 'All' by default
    const lastTab = localStorage.getItem('lastTab') || 'all';
    showTab(lastTab);
    // Add click listeners to tab links to save tab
    document.querySelectorAll('a[href^="#"]').forEach(link => {
      link.addEventListener('click', function(e) {
        const tab = this.getAttribute('href').replace('#', '');
        showTab(tab);
      });
    });
  </script>
{% endblock %}

```
assign_task.html
```
{% extends 'base.html' %}
{% block title %}Assign Task{% endblock %}
{% block content %}
  <h1 class="text-2xl font-bold mb-6">Assign Task</h1>
  <form method="POST" enctype="multipart/form-data" class="bg-white rounded shadow p-6 max-w-lg mx-auto space-y-4 glass">
    {% csrf_token %}
    <div>
      <label class="block font-semibold mb-1">Title:</label>
      <input name="title" required class="border rounded px-3 py-2 w-full" />
    </div>
    <div>
      <label class="block font-semibold mb-1">Description:</label>
      <textarea name="description" class="border rounded px-3 py-2 w-full"></textarea>
    </div>
    {% if employees %}
      <div>
        <label class="block font-semibold mb-1">Assign to:</label>
        <div id="section-buttons" class="flex flex-wrap space-x-2 mb-2">
          {% if user.employeeprofile.role == 'head' %}
            <button type="button" class="section-btn bg-gradient-to-r from-blue-400 to-blue-600 text-white px-3 py-1 rounded mb-2" data-section="employee">Employees</button>
            <button type="button" class="section-btn bg-gradient-to-r from-purple-400 to-purple-600 text-white px-3 py-1 rounded mb-2" data-section="manager">Managers</button>
          {% elif user.employeeprofile.role == 'manager' %}
            <button type="button" class="section-btn bg-gradient-to-r from-blue-400 to-blue-600 text-white px-3 py-1 rounded mb-2" data-section="employee">Employees</button>
          {% endif %}
        </div>
        <div id="user-pills" class="flex overflow-x-auto space-x-2 py-2 mb-2 min-h-[48px] w-full"></div>
        <div id="selected-pills" class="flex overflow-x-auto space-x-2 py-2 mb-2 min-h-[48px] w-full"></div>
        <input type="hidden" name="assigned_to" id="assigned_to" />
      </div>
      <style>
        .glass-pill {
          background: rgba(255,255,255,0.25);
          box-shadow: 0 4px 24px 0 rgba(31, 38, 135, 0.10);
          backdrop-filter: blur(6px);
          -webkit-backdrop-filter: blur(6px);
          border-radius: 9999px;
          border: 1px solid rgba(255,255,255,0.18);
          transition: background 0.2s, box-shadow 0.2s;
        }
        .glass-pill.selected {
          background: rgba(59,130,246,0.25); /* blue-500 glassy */
          box-shadow: 0 4px 24px 0 rgba(59,130,246,0.10);
          border: 1px solid rgba(59,130,246,0.18);
        }
      </style>
      <script>
        const allUsers = {
          employee: [
            {% for emp in employees %}{% if emp.role == 'employee' %}{ id: {{ emp.id }}, name: '{{ emp.user.username }}', role: 'employee' },{% endif %}{% endfor %}
          ],
          manager: [
            {% for emp in employees %}{% if emp.role == 'manager' %}{ id: {{ emp.id }}, name: '{{ emp.user.username }}', role: 'manager' },{% endif %}{% endfor %}
          ],
        };
        let selected = [];
        let currentSection = Object.keys(allUsers)[0];
        // Preselect user if 'to' query param is present
        function getQueryParam(name) {
          const url = new URL(window.location.href);
          return url.searchParams.get(name);
        }
        function preselectUser() {
          const toId = getQueryParam('to');
          if (toId) {
            for (const section in allUsers) {
              const user = allUsers[section].find(u => u.id == toId);
              if (user && !selected.find(u => u.id == user.id)) {
                selected.push(user);
                currentSection = section;
                break;
              }
            }
          }
        }
        function renderUserPills() {
          const container = document.getElementById('user-pills');
          container.innerHTML = '';
          allUsers[currentSection].forEach(user => {
            if (!selected.find(u => u.id === user.id)) {
              const pill = document.createElement('div');
              pill.className = 'glass-pill flex items-center px-3 py-1 shadow cursor-pointer transition hover:scale-105 mb-2';
              pill.innerHTML = `<span class='truncate max-w-[100px]'>${user.name}</span><button type=\"button\" class=\"ml-2 text-lg font-bold\" onclick=\"addUser(${user.id})\">+</button>`;
              container.appendChild(pill);
            }
          });
        }
        function renderSelectedPills() {
          const container = document.getElementById('selected-pills');
          container.innerHTML = '';
          selected.forEach(user => {
            const pill = document.createElement('div');
            pill.className = 'glass-pill selected flex items-center px-3 py-1 shadow cursor-pointer transition hover:scale-105 mb-2';
            pill.innerHTML = `<span class='truncate max-w-[100px]'>${user.name}</span><button type=\"button\" class=\"ml-2 text-lg font-bold\" onclick=\"removeUser(${user.id})\">&times;</button>`;
            container.appendChild(pill);
          });
          document.getElementById('assigned_to').value = selected.map(u => u.id).join(',');
        }
        function addUser(id) {
          const user = allUsers[currentSection].find(u => u.id === id);
          if (user && !selected.find(u => u.id === id)) {
            selected.push(user);
            renderUserPills();
            renderSelectedPills();
          }
        }
        function removeUser(id) {
          selected = selected.filter(u => u.id !== id);
          renderUserPills();
          renderSelectedPills();
        }
        document.querySelectorAll('.section-btn').forEach(btn => {
          btn.addEventListener('click', function() {
            currentSection = this.getAttribute('data-section');
            renderUserPills();
          });
        });
        // Initial render
        preselectUser();
        renderUserPills();
        renderSelectedPills();
      </script>
    {% endif %}
    <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded w-full">Assign</button>
  </form>
{% endblock %}

```

profile.html
```
{% extends 'base.html' %}
{% block title %}Profile{% endblock %}
{% block content %}
  <h1 class="text-2xl font-bold mb-6">
    {% if editing_other %}
      Editing Profile: {{ profile.user.username }}
    {% else %}
      Welcome, {{ profile.user.username }}
    {% endif %}
  </h1>
  <form method="POST" class="bg-white rounded shadow p-6 max-w-md mx-auto space-y-4">
    {% csrf_token %}
    <div>
      <label class="block font-semibold">Role:</label>
      <span class="text-gray-700">{{ profile.role }}</span>
    </div>
    <div>
      <label class="block font-semibold">Progress (%):</label>
      <input type="number" name="progress" value="{{ profile.progress }}" min="0" max="100" class="border rounded px-3 py-2 w-full" {% if not editing_other and profile.user != user %}readonly{% endif %} />
    </div>
    <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded w-full">Save</button>
  </form>
  {% if not editing_other and profile.user == user and profile.role == 'employee' %}
    <div class="mt-8">
      <h2 class="text-xl font-bold mb-4">My Tasks</h2>
      <ul>
        {% for task in profile.tasks.all %}
          <li class="mb-2 p-2 border rounded flex justify-between items-center">
            <span>{{ task.title }} ({{ task.status }})</span>
            <a href="{% url 'report-task' task.id %}" class="text-orange-600 underline ml-4">Report/Mark</a>
          </li>
        {% empty %}
          <li>No tasks assigned.</li>
        {% endfor %}
      </ul>
    </div>
  {% endif %}
  <div class="flex justify-between mt-6 max-w-md mx-auto">
    <a href="{% url 'employee-list' %}" class="text-blue-600 underline">Back to Team</a>
    <a href="{% url 'logout' %}" class="text-red-600 underline">Logout</a>
  </div>
{% endblock %}
```
settings.py
```
"""
Django settings for business_manager project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-(-o%hkmvk4u!=ius^3n_$!e0gj^)coc=(!u!0ie(+ijiuf7*r-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'department',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'business_manager.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'business_manager.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/login'
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'
```
root/manage.py
```
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'business_manager.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

```